# YouTube Music Crossfade Chrome Extension

Create a Google Chrome extension that enables seamless crossfading between two YouTube Music tabs, simulating a professional DJ mixing experience.

## Core Functionality

### Primary Features
- **Dual Tab Management**: Automatically detect and manage exactly 2 YouTube Music tabs
- **Crossfade Engine**: Smooth audio transition between tabs with configurable fade duration
- **Auto-Progression**: Automatic playlist advancement with intelligent queuing
- **Volume Control**: Independent volume manipulation for each tab during transitions

### Crossfade Logic
1. **Initial State**: Tab 1 plays at 100% volume, Tab 2 is paused at 0% volume
2. **Transition Trigger**: When Tab 1's current song reaches a configurable time before end (default: 15 seconds)
3. **Crossfade Process**:
   - Start playing Tab 2 from 0% volume
   - Gradually increase Tab 2 volume from 0% to 100% over fade duration
   - Simultaneously decrease Tab 1 volume from 100% to 0%
   - After crossfade completes, pause Tab 1 and advance to next song
4. **Role Reversal**: Repeat process with Tab 2 → Tab 1 when Tab 2's song nears end

## Technical Requirements

### Chrome Extension Structure
```
manifest.json (Manifest V3)
├── background.js (Service Worker)
├── content.js (YouTube Music page injection)
├── popup.html & popup.js (Extension UI)
└── styles.css
```

### Key Components

#### 1. Tab Detection & Management
- Use `chrome.tabs.query()` to find YouTube Music tabs
- Maintain persistent connection between background script and content scripts
- Handle tab creation, closure, and navigation events
- Validate exactly 2 YouTube Music tabs are available

#### 2. Audio Control System
- Inject content scripts into YouTube Music pages
- Access YouTube's player API or DOM elements for:
  - Play/pause control
  - Volume adjustment (0-100%)
  - Current playback time
  - Song duration
  - Next track navigation
- Implement smooth volume ramping using `setInterval()` or `requestAnimationFrame()`

#### 3. Crossfade Engine
- **Timing Calculation**: Monitor current song progress and trigger crossfade at appropriate time
- **Volume Interpolation**: Create smooth volume curves (linear or eased transitions)
- **Synchronization**: Ensure both tabs are properly coordinated during transitions
- **Error Handling**: Manage playback failures, network issues, or user interference

#### 4. User Interface (Popup)
- **Status Display**: Show which tabs are active, current songs, crossfade progress
- **Controls**:
  - Start/Stop crossfade mode
  - Fade duration slider (5-30 seconds)
  - Crossfade trigger time (10-30 seconds before song end)
  - Manual crossfade trigger button
- **Tab Selection**: Allow user to designate which 2 tabs to use if more than 2 exist

### Implementation Details

#### Content Script Integration
```javascript
// Access YouTube Music player elements
const player = document.querySelector('[data-testid="player"]');
const volumeSlider = document.querySelector('[data-testid="volume-slider"]');
const playButton = document.querySelector('[data-testid="play-pause-button"]');

// Implement volume control
function setVolume(level) {
    // Manipulate YouTube's volume control
}

// Get current playback state
function getPlaybackInfo() {
    return {
        currentTime: /* current position */,
        duration: /* total duration */,
        isPlaying: /* play state */,
        songTitle: /* current song */
    };
}
```

#### Background Script Logic
```javascript
// Maintain tab state
let activeTab1 = null;
let activeTab2 = null;
let crossfadeActive = false;
let currentLeader = 1; // Which tab is currently playing

// Crossfade execution
async function executeCrossfade(fromTab, toTab, duration) {
    // Implement smooth volume transition
    // Handle timing and synchronization
}
```

### Advanced Features (Nice to Have)
- **Beatmatching**: Attempt to sync crossfades with song beats
- **Smart Triggers**: AI-powered optimal crossfade timing based on song structure
- **Playlist Intelligence**: Skip instrumental outros or intros for better mixing
- **Visual Feedback**: Real-time waveform or progress visualization
- **Keyboard Shortcuts**: Hotkeys for manual control
- **Multiple Crossfade Styles**: Linear, exponential, or S-curve transitions

## Technical Considerations

### Permissions Required
```json
{
  "permissions": [
    "tabs",
    "activeTab",
    "storage"
  ],
  "host_permissions": [
    "https://music.youtube.com/*"
  ]
}
```

### Challenges to Address
1. **YouTube API Limitations**: Work around YouTube's player restrictions
2. **Cross-Tab Communication**: Reliable messaging between tabs and background
3. **Timing Precision**: Accurate crossfade triggers without audio gaps
4. **User Interference**: Handle manual user actions during automated crossfades
5. **Performance**: Minimize CPU usage during continuous monitoring

### Testing Strategy
- Test with various playlist types (music, podcasts, different genres)
- Verify crossfade quality with different fade durations
- Test edge cases: very short songs, network interruptions, tab switching
- Ensure compatibility with YouTube Music updates

## Deliverables
1. Complete Chrome extension with all core functionality
2. Comprehensive error handling and user feedback
3. Clean, documented code with proper Chrome extension best practices
4. User-friendly interface with intuitive controls
5. Installation and usage instructions

Focus on creating a robust, production-ready extension that provides a seamless DJ-like experience for YouTube Music users.